// Generated by Molecule 0.6.1

#define MOLECULEC_VERSION 6001
#define MOLECULE_API_VERSION_MIN 5000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef SAMPLE_H
#define SAMPLE_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_SAMPLE
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

#define                                 MolReader_SampleByte2_verify(s, c)              mol_verify_fixed_size(s, 2)
#define                                 MolReader_SampleByte2_get_nth0(s)               mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_SampleByte2_get_nth1(s)               mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint8_verify(s, c)                    mol_verify_fixed_size(s, 1)
#define                                 MolReader_Uint8_get_nth0(s)                     mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Int8_verify(s, c)                     mol_verify_fixed_size(s, 1)
#define                                 MolReader_Int8_get_nth0(s)                      mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint16_verify(s, c)                   mol_verify_fixed_size(s, 2)
#define                                 MolReader_Uint16_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint16_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Int16_verify(s, c)                    mol_verify_fixed_size(s, 2)
#define                                 MolReader_Int16_get_nth0(s)                     mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Int16_get_nth1(s)                     mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint32_verify(s, c)                   mol_verify_fixed_size(s, 4)
#define                                 MolReader_Uint32_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint32_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint32_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint32_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Int32_verify(s, c)                    mol_verify_fixed_size(s, 4)
#define                                 MolReader_Int32_get_nth0(s)                     mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Int32_get_nth1(s)                     mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Int32_get_nth2(s)                     mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Int32_get_nth3(s)                     mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_verify(s, c)                   mol_verify_fixed_size(s, 8)
#define                                 MolReader_Uint64_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint64_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint64_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint64_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Uint64_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Uint64_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Uint64_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Int64_verify(s, c)                    mol_verify_fixed_size(s, 8)
#define                                 MolReader_Int64_get_nth0(s)                     mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Int64_get_nth1(s)                     mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Int64_get_nth2(s)                     mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Int64_get_nth3(s)                     mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Int64_get_nth4(s)                     mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Int64_get_nth5(s)                     mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Int64_get_nth6(s)                     mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Int64_get_nth7(s)                     mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_SampleFixedVector_verify(s, c)        mol_fixvec_verify(s, 1)
#define                                 MolReader_SampleFixedVector_length(s)           mol_fixvec_length(s)
#define                                 MolReader_SampleFixedVector_get(s, i)           mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_SampleFixedVector_raw_bytes(s)        mol_fixvec_slice_raw_bytes(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SampleDynVector_verify                (const mol_seg_t*, bool);
#define                                 MolReader_SampleDynVector_length(s)             mol_dynvec_length(s)
#define                                 MolReader_SampleDynVector_get(s, i)             mol_dynvec_slice_by_index(s, i)
#define                                 MolReader_SampleStruct_verify(s, c)             mol_verify_fixed_size(s, 6)
#define                                 MolReader_SampleStruct_get_u32(s)               mol_slice_by_offset(s, 0, 4)
#define                                 MolReader_SampleStruct_get_byte2(s)             mol_slice_by_offset(s, 4, 2)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SampleTable_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_SampleTable_actual_field_count(s)     mol_table_actual_field_count(s)
#define                                 MolReader_SampleTable_has_extra_fields(s)       mol_table_has_extra_fields(s, 2)
#define                                 MolReader_SampleTable_get_byte_2d_vector(s)     mol_table_slice_by_index(s, 0)
#define                                 MolReader_SampleTable_get_byte2(s)              mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SampleUnion_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_SampleUnion_unpack(s)                 mol_union_unpack(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SampleOptionTable_verify              (const mol_seg_t*, bool);
#define                                 MolReader_SampleOptionTable_is_none(s)          mol_option_is_none(s)

/*
 * Builder APIs
 */

#define                                 MolBuilder_SampleByte2_init(b)                  mol_builder_initialize_fixed_size(b, 2)
#define                                 MolBuilder_SampleByte2_set_nth0(b, p)           mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_SampleByte2_set_nth1(b, p)           mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_SampleByte2_build(b)                 mol_builder_finalize_simple(b)
#define                                 MolBuilder_SampleByte2_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_Uint8_init(b)                        mol_builder_initialize_fixed_size(b, 1)
#define                                 MolBuilder_Uint8_set_nth0(b, p)                 mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint8_build(b)                       mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint8_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Int8_init(b)                         mol_builder_initialize_fixed_size(b, 1)
#define                                 MolBuilder_Int8_set_nth0(b, p)                  mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Int8_build(b)                        mol_builder_finalize_simple(b)
#define                                 MolBuilder_Int8_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_Uint16_init(b)                       mol_builder_initialize_fixed_size(b, 2)
#define                                 MolBuilder_Uint16_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint16_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint16_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint16_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Int16_init(b)                        mol_builder_initialize_fixed_size(b, 2)
#define                                 MolBuilder_Int16_set_nth0(b, p)                 mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Int16_set_nth1(b, p)                 mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Int16_build(b)                       mol_builder_finalize_simple(b)
#define                                 MolBuilder_Int16_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Uint32_init(b)                       mol_builder_initialize_fixed_size(b, 4)
#define                                 MolBuilder_Uint32_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint32_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint32_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint32_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint32_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint32_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Int32_init(b)                        mol_builder_initialize_fixed_size(b, 4)
#define                                 MolBuilder_Int32_set_nth0(b, p)                 mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Int32_set_nth1(b, p)                 mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Int32_set_nth2(b, p)                 mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Int32_set_nth3(b, p)                 mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Int32_build(b)                       mol_builder_finalize_simple(b)
#define                                 MolBuilder_Int32_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Uint64_init(b)                       mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_Uint64_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint64_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint64_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint64_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint64_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Uint64_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Uint64_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Uint64_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Uint64_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint64_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Int64_init(b)                        mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_Int64_set_nth0(b, p)                 mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Int64_set_nth1(b, p)                 mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Int64_set_nth2(b, p)                 mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Int64_set_nth3(b, p)                 mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Int64_set_nth4(b, p)                 mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Int64_set_nth5(b, p)                 mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Int64_set_nth6(b, p)                 mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Int64_set_nth7(b, p)                 mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Int64_build(b)                       mol_builder_finalize_simple(b)
#define                                 MolBuilder_Int64_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_SampleFixedVector_init(b)            mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_SampleFixedVector_push(b, p)         mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_SampleFixedVector_build(b)           mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_SampleFixedVector_clear(b)           mol_builder_discard(b)
#define                                 MolBuilder_SampleDynVector_init(b)              mol_builder_initialize_with_capacity(b, 64, 64)
#define                                 MolBuilder_SampleDynVector_push(b, p, l)        mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_SampleDynVector_build(b)             mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_SampleDynVector_clear(b)             mol_builder_discard(b)
#define                                 MolBuilder_SampleStruct_init(b)                 mol_builder_initialize_fixed_size(b, 6)
#define                                 MolBuilder_SampleStruct_set_u32(b, p)           mol_builder_set_by_offset(b, 0, p, 4)
#define                                 MolBuilder_SampleStruct_set_byte2(b, p)         mol_builder_set_by_offset(b, 4, p, 2)
#define                                 MolBuilder_SampleStruct_build(b)                mol_builder_finalize_simple(b)
#define                                 MolBuilder_SampleStruct_clear(b)                mol_builder_discard(b)
#define                                 MolBuilder_SampleTable_init(b)                  mol_table_builder_initialize(b, 128, 2)
#define                                 MolBuilder_SampleTable_set_byte_2d_vector(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_SampleTable_set_byte2(b, p, l)       mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_SampleTable_build                    (mol_builder_t);
#define                                 MolBuilder_SampleTable_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_SampleUnion_init(b)                  mol_union_builder_initialize(b, 16, 0, &MolDefault_SampleStruct, 6)
#define                                 MolBuilder_SampleUnion_set_SampleStruct(b, p, l) mol_union_builder_set(b, 0, p, l)
#define                                 MolBuilder_SampleUnion_set_SampleTable(b, p, l) mol_union_builder_set(b, 1, p, l)
#define                                 MolBuilder_SampleUnion_build(b)                 mol_builder_finalize_simple(b)
#define                                 MolBuilder_SampleUnion_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_SampleOptionTable_init(b)            mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_SampleOptionTable_set(b, p, l)       mol_option_builder_set(b, p, l)
#define                                 MolBuilder_SampleOptionTable_build(b)           mol_builder_finalize_simple(b)
#define                                 MolBuilder_SampleOptionTable_clear(b)           mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleByte2[2]   =  {____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint8[1]         =  {____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Int8[1]          =  {____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint16[2]        =  {____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Int16[2]         =  {____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint32[4]        =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Int32[4]         =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint64[8]        =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Int64[8]         =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleFixedVector[4] =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleDynVector[4] =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleStruct[6]  =  {
    ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleTable[18]  =  {
    0x12, ____, ____, ____, 0x0c, ____, ____, ____, 0x10, ____, ____, ____,
    0x04, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleUnion[10]  =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SampleOptionTable[0] =  {};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_SampleDynVector_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_SampleFixedVector_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_SampleFixedVector_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_SampleTable_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_SampleDynVector_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_SampleByte2_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_SampleUnion_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    mol_num_t item_id = mol_unpack_number(input->ptr);
    mol_seg_t inner;
    inner.ptr = input->ptr + MOL_NUM_T_SIZE;
    inner.size = input->size - MOL_NUM_T_SIZE;
    switch(item_id) {
        case 0:
            return MolReader_SampleStruct_verify(&inner, compatible);
        case 1:
            return MolReader_SampleTable_verify(&inner, compatible);
        default:
            return MOL_ERR_UNKNOWN_ITEM;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_SampleOptionTable_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_SampleTable_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_SampleTable_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 2 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 2 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_SampleDynVector, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 2;
        memcpy(dst, &MolDefault_SampleByte2, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_SAMPLE
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_SAMPLE
#endif /* __DEFINE_MOLECULE_API_DECORATOR_SAMPLE */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* SAMPLE_H */
